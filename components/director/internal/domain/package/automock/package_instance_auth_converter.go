// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	"github.com/kyma-incubator/compass/components/director/pkg/graphql/externalschema"
)
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"

// PackageInstanceAuthConverter is an autogenerated mock type for the PackageInstanceAuthConverter type
type PackageInstanceAuthConverter struct {
	mock.Mock
}

// MultipleToGraphQL provides a mock function with given fields: in
func (_m *PackageInstanceAuthConverter) MultipleToGraphQL(in []*model.PackageInstanceAuth) ([]*externalschema.PackageInstanceAuth, error) {
	ret := _m.Called(in)

	var r0 []*externalschema.PackageInstanceAuth
	if rf, ok := ret.Get(0).(func([]*model.PackageInstanceAuth) []*externalschema.PackageInstanceAuth); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*externalschema.PackageInstanceAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*model.PackageInstanceAuth) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToGraphQL provides a mock function with given fields: in
func (_m *PackageInstanceAuthConverter) ToGraphQL(in *model.PackageInstanceAuth) (*externalschema.PackageInstanceAuth, error) {
	ret := _m.Called(in)

	var r0 *externalschema.PackageInstanceAuth
	if rf, ok := ret.Get(0).(func(*model.PackageInstanceAuth) *externalschema.PackageInstanceAuth); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*externalschema.PackageInstanceAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.PackageInstanceAuth) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
