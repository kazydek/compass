// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	"github.com/kyma-incubator/compass/components/director/pkg/graphql/externalschema"
)
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-incubator/compass/components/director/internal/model"

// APIConverter is an autogenerated mock type for the APIConverter type
type APIConverter struct {
	mock.Mock
}

// InputFromGraphQL provides a mock function with given fields: in
func (_m *APIConverter) InputFromGraphQL(in *externalschema.APIDefinitionInput) *model.APIDefinitionInput {
	ret := _m.Called(in)

	var r0 *model.APIDefinitionInput
	if rf, ok := ret.Get(0).(func(*externalschema.APIDefinitionInput) *model.APIDefinitionInput); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.APIDefinitionInput)
		}
	}

	return r0
}

// MultipleInputFromGraphQL provides a mock function with given fields: in
func (_m *APIConverter) MultipleInputFromGraphQL(in []*externalschema.APIDefinitionInput) []*model.APIDefinitionInput {
	ret := _m.Called(in)

	var r0 []*model.APIDefinitionInput
	if rf, ok := ret.Get(0).(func([]*externalschema.APIDefinitionInput) []*model.APIDefinitionInput); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.APIDefinitionInput)
		}
	}

	return r0
}

// MultipleToGraphQL provides a mock function with given fields: in
func (_m *APIConverter) MultipleToGraphQL(in []*model.APIDefinition) []*externalschema.APIDefinition {
	ret := _m.Called(in)

	var r0 []*externalschema.APIDefinition
	if rf, ok := ret.Get(0).(func([]*model.APIDefinition) []*externalschema.APIDefinition); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*externalschema.APIDefinition)
		}
	}

	return r0
}

// ToGraphQL provides a mock function with given fields: in
func (_m *APIConverter) ToGraphQL(in *model.APIDefinition) *externalschema.APIDefinition {
	ret := _m.Called(in)

	var r0 *externalschema.APIDefinition
	if rf, ok := ret.Get(0).(func(*model.APIDefinition) *externalschema.APIDefinition); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*externalschema.APIDefinition)
		}
	}

	return r0
}
